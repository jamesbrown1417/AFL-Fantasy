---
title: "Player Matchups Report"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "2023-03-23"
format:
  html:
    df-print: paged
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
editor: visual
---

```{r}
# Libraries and functions
library(tidyverse)
library(qreport)

# Load data processing functions
source("../../Functions/data_processing_functions.R")

# Get current season data
current_season_data <-
  get_fantasy_data(season = lubridate::year(Sys.Date()))

# Historical
prev_season_data <- readr::read_rds("../../Data/afl_fantasy_2014_2022_data.rds")
  
# Combine to get total
player_history <- dplyr::bind_rows(current_season_data, prev_season_data)
  
# Create function to get scoring history
get_scoring_history <-
  function(df = player_history,
           player_name,
           opposition = NULL) {
    # Filter to desired player
    df <-
      df |>
      dplyr::filter(player_full_name == player_name) |>
      dplyr::arrange(dplyr::desc(start_time_utc))
    
    # Filter opposition
    if (!is.null(opposition)) {
      df <-
        df |>
        dplyr::filter(opposition_team == opposition)
    }
    
    # Return Data
    return(df)
  }
```
## Best and Worst Teams to Play
```{r}
#| tbl-column: 20

# Get player positions
positions <-
  fitzRoy::fetch_player_details_afl(season = 2023) |> 
  transmute(player_full_name = str_glue("{firstName} {surname}"),
            position = str_replace(position, "_", " ")) |> 
  mutate(position = str_to_title(position))

# Join with position data
overall <-
current_season_data |> 
  left_join(positions) |> 
  filter(fantasy_points != 0 & !is.na(fantasy_points)) |> 
  summarise(total_points = sum(fantasy_points), .by = opposition_team) |> 
  arrange(desc(total_points))

overall
```

```{r}
#| results: asis

# By Position
by_position <- 
  current_season_data |> 
  left_join(positions) |> 
  filter(fantasy_points != 0 & !is.na(fantasy_points)) |> 
  summarise(avg_points = mean(fantasy_points), n = n(), .by = c(opposition_team, position)) |> 
  arrange(desc(avg_points))

# Positions
unique_positions <-
  by_position |>
  distinct(position) |> 
  pull(position)

# Get list
map(unique_positions, function(x) by_position |> filter(position == x) |> arrange(desc(avg_points))) |> 
  set_names(unique_positions) |> 
  maketabs()
```



<!-- ## Player History -->

<!-- ```{r} -->
<!-- get_scoring_history(player_name = "Tom Mitchell", opposition = "Port Adelaide") -->
<!-- ``` -->
