---
title: "Player Performance"
format:
  html:
      theme: cosmo
      page-layout: full
      df-print: paged
      self-contained: true
      toc: true
      fig-width: 8
      fig-height: 6
editor: visual
author: James Brown
echo: false
warning: false
message: false
---

```{r}
#===============================================================================
# Libraries and functions
#===============================================================================

library(tidyverse)
library(qreport)
library(ggplot2)
library(data.table)
`%notin%` <- Negate(`%in%`)

#===============================================================================
# Read in data
#===============================================================================

# Get helper functions
source("../../Functions/data_processing_functions.r")

# Get data
data_2023 <- get_fantasy_data(season = 2023)
afl_fantasy_2014_2022_data <- readRDS("../../Data/afl_fantasy_2014_2022_data.rds")

# Adjust for COVID year
afl_fantasy_2014_2022_data <-
  afl_fantasy_2014_2022_data |> 
  mutate(fantasy_points = as.integer(fantasy_points / 0.8),
         disposals = as.integer(disposals / 0.8))

# Combine
afl_fantasy_data <-
  bind_rows(data_2023, afl_fantasy_2014_2022_data) |> 
  arrange(start_time_utc)

# Make round number an ordered factor
afl_fantasy_data$round <-
  factor(
    afl_fantasy_data$round,
    levels = c(
      'Round 1',
      'Round 2',
      'Round 3',
      'Round 4',
      'Round 5',
      'Round 6',
      'Round 7',
      'Round 8',
      'Round 9',
      'Round 10',
      'Round 11',
      'Round 12',
      'Round 13',
      'Round 14',
      'Round 15',
      'Round 16',
      'Round 17',
      'Round 18',
      'Round 19',
      'Round 20',
      'Round 21',
      'Round 22',
      'Round 23',
      'Round 24',
      'Finals Week 1',
      'Semi Finals',
      'Preliminary Finals',
      'Grand Final'
    ),
    ordered = TRUE
  )

```

```{r}
# Get player history datasets
player_history <-
  afl_fantasy_data |>
  transmute(
    player_full_name,
    season = factor(season_name),
    round,
    start_time_utc,
    player_team = factor(player_team),
    opposition_team = factor(opposition_team),
    venue = factor(venue),
    match_result_string,
    disposals,
    fantasy_points,
    tog_percentage
  ) |> 
  arrange(player_full_name, desc(start_time_utc))

# Filter to only players who have played in 2023
player_history_2023 <-
  player_history |> 
  filter(player_full_name %in% data_2023$player_full_name)

```

```{r}
# Full season
player_averages_2023 <-
player_history_2023 |>
filter(season == "2023") |>
filter(tog_percentage >= 50) |>
group_by(player_full_name, player_team) |>
summarise(games = n(), avg_disposals = mean(disposals), avg_fantasy = mean(fantasy_points)) |>
arrange(desc(avg_fantasy))

# Last 3
player_averages_last_3 <-
player_history_2023 |>
filter(season == "2023") |>
filter(tog_percentage >= 50) |>
group_by(player_full_name, player_team) |>
arrange(desc(round)) |>
slice_head(n = 3) |>
summarise(games = n(), avg_disposals_last_3 = mean(disposals), avg_fantasy_last_3 = mean(fantasy_points)) |>
arrange(desc(avg_fantasy_last_3)) |>
filter(games == 3) |>
select(-games)

# Last 5
player_averages_last_5 <-
player_history_2023 |>
filter(season == "2023") |>
filter(tog_percentage >= 50) |>
group_by(player_full_name, player_team) |>
arrange(desc(round)) |>
slice_head(n = 5) |>
summarise(games = n(), avg_disposals_last_5 = mean(disposals), avg_fantasy_last_5 = mean(fantasy_points)) |>
arrange(desc(avg_fantasy_last_5)) |>
filter(games == 5) |>
select(-games)

# Last 7
player_averages_last_7 <-
player_history_2023 |>
filter(season == "2023") |>
filter(tog_percentage >= 50) |>
group_by(player_full_name, player_team) |>
arrange(desc(round)) |>
slice_head(n = 7) |>
summarise(games = n(), avg_disposals_last_7 = mean(disposals), avg_fantasy_last_7 = mean(fantasy_points)) |>
arrange(desc(avg_fantasy_last_7)) |>
filter(games == 7) |>
select(-games)

# Last 10
player_averages_last_10 <-
player_history_2023 |>
filter(season == "2023") |>
filter(tog_percentage >= 50) |>
group_by(player_full_name, player_team) |>
arrange(desc(round)) |>
slice_head(n = 10) |>
summarise(games = n(), avg_disposals_last_10 = mean(disposals), avg_fantasy_last_10 = mean(fantasy_points)) |>
arrange(desc(avg_fantasy_last_10)) |>
filter(games == 10) |>
select(-games)
```

# Top Players

## Disposals

```{r}
#| results: asis

# Full season
full_season_disposals <-
player_averages_2023 |>
arrange(desc(avg_disposals)) |>
select(-avg_fantasy)

# Last 3
last_3_disposals <-
player_averages_last_3 |>
arrange(desc(avg_disposals_last_3)) |>
select(-avg_fantasy_last_3)

# Last 5
last_5_disposals <-
player_averages_last_5 |>
arrange(desc(avg_disposals_last_5)) |>
select(-avg_fantasy_last_5)

# Last 7
last_7_disposals <-
player_averages_last_7 |>
arrange(desc(avg_disposals_last_7)) |>
select(-avg_fantasy_last_7)

# Last 10
last_10_disposals <-
player_averages_last_10 |>
arrange(desc(avg_disposals_last_10)) |>
select(-avg_fantasy_last_10)

# Create list and make tabset
disposals_list <-
list("Full Season" = full_season_disposals,
     "Last 3" = last_3_disposals,
     "Last 5" = last_5_disposals,
     "Last 7" = last_7_disposals,
     "Last 10" = last_10_disposals)

# Round all numeric columns for each dataframe in the list
disposals_list <-
  disposals_list |>
  map(~ .x |>
        mutate_if(is.double, round, 1))

maketabs(disposals_list, wide = TRUE)
```

## Fantasy

```{r}
#| results: asis

# Full season
full_season_fantasy <-
player_averages_2023 |>
arrange(desc(avg_fantasy)) |>
select(-avg_disposals)

# Last 3
last_3_fantasy <-
player_averages_last_3 |>
arrange(desc(avg_fantasy_last_3)) |>
select(-avg_disposals_last_3)

# Last 5
last_5_fantasy <-
player_averages_last_5 |>
arrange(desc(avg_fantasy_last_5)) |>
select(-avg_disposals_last_5)

# Last 7
last_7_fantasy <-
player_averages_last_7 |>
arrange(desc(avg_fantasy_last_7)) |>
select(-avg_disposals_last_7)

# Last 10
last_10_fantasy <-
player_averages_last_10 |>
arrange(desc(avg_fantasy_last_10)) |>
select(-avg_disposals_last_10)

# Create list and make tabset
fantasy_list <-
list("Full Season" = full_season_fantasy,
     "Last 3" = last_3_fantasy,
     "Last 5" = last_5_fantasy,
     "Last 7" = last_7_fantasy,
     "Last 10" = last_10_fantasy)

# Round all numeric columns for each dataframe in the list
fantasy_list <-
  fantasy_list |>
  map(~ .x |>
        mutate_if(is.double, round, 1))

maketabs(fantasy_list, wide = TRUE)
```

# Performing Above Average Recently

## Disposals

```{r}
#| results: asis
# Last 3
disposals_l3 <-
player_averages_2023 |>
left_join(player_averages_last_3) |>
select(-avg_fantasy, -avg_fantasy_last_3) |>
mutate(diff = avg_disposals_last_3 - avg_disposals) |>
arrange(desc(diff))

# Last 5
disposals_l5 <-
player_averages_2023 |>
left_join(player_averages_last_5) |>
select(-avg_fantasy, -avg_fantasy_last_5) |>
mutate(diff = avg_disposals_last_5 - avg_disposals) |>
arrange(desc(diff))

# Last 7
disposals_l7 <-
player_averages_2023 |>
left_join(player_averages_last_7) |>
select(-avg_fantasy, -avg_fantasy_last_7) |>
mutate(diff = avg_disposals_last_7 - avg_disposals) |>
arrange(desc(diff))

# Last 10
disposals_l10 <-
player_averages_2023 |>
left_join(player_averages_last_10) |>
select(-avg_fantasy, -avg_fantasy_last_10) |>
mutate(diff = avg_disposals_last_10 - avg_disposals) |>
arrange(desc(diff))

# Create tabset
disposals_list <-
list(
  "Last 3" = disposals_l3,
  "Last 5" = disposals_l5,
  "Last 7" = disposals_l7,
  "Last 10" = disposals_l10
)

# Round all numeric columns for each dataframe in the list
disposals_list <-
  disposals_list |>
  map(~ .x |>
        mutate_if(is.numeric, round, 1))

maketabs(disposals_list, wide = TRUE)
```

## Fantasy

```{r}
#| results: asis

# Last 3
fantasy_l3 <-
player_averages_2023 |>
left_join(player_averages_last_3) |>
select(-avg_disposals, -avg_disposals_last_3) |>
mutate(diff = avg_fantasy_last_3 - avg_fantasy) |>
arrange(desc(diff))

# Last 5
fantasy_l5 <-
player_averages_2023 |>
left_join(player_averages_last_5) |>
select(-avg_disposals, -avg_disposals_last_5) |>
mutate(diff = avg_fantasy_last_5 - avg_fantasy) |>
arrange(desc(diff))

# Last 7
fantasy_l7 <-
player_averages_2023 |>
left_join(player_averages_last_7) |>
select(-avg_disposals, -avg_disposals_last_7) |>
mutate(diff = avg_fantasy_last_7 - avg_fantasy) |>
arrange(desc(diff))

# Last 10
fantasy_l10 <-
player_averages_2023 |>
left_join(player_averages_last_10) |>
select(-avg_disposals, -avg_disposals_last_10) |>
mutate(diff = avg_fantasy_last_10 - avg_fantasy) |>
arrange(desc(diff))

# Create tabset
fantasy_list <-
list(
  "Last 3" = fantasy_l3,
  "Last 5" = fantasy_l5,
  "Last 7" = fantasy_l7,
  "Last 10" = fantasy_l10
)

# Round all numeric columns for each dataframe in the list
fantasy_list <-
  fantasy_list |>
  map(~ .x |>
        mutate_if(is.numeric, round, 1))

maketabs(fantasy_list, wide = TRUE)
```

# Players Performing Below Average Recently

## Disposals

```{r}
#| results: asis
disposals_list <-
  disposals_list |>
  map(~ .x |>
        arrange((diff)))

maketabs(disposals_list, wide = TRUE)
```

## Fantasy

```{r}
#| results: asis
fantasy_list <-
  fantasy_list |>
  map(~ .x |>
        arrange((diff)))

maketabs(fantasy_list, wide = TRUE)
```

# Streaks - 2023

::: {.panel-tabset}

## 30 Disposals

```{r}
# Create initial tibble
disposals_streak_30 <-
afl_fantasy_data |> 
  filter(season_name == "2023") |> 
  arrange(player_full_name, round) |> 
  select(match_name, round, player_full_name, disposals, tog_percentage) |> 
  filter(tog_percentage >= 50)

# Create a new binary column to mark where disposals >= 30
disposals_streak_30 <- disposals_streak_30 %>%
  mutate(over_30 = ifelse(disposals >= 30, 1, 0))

# Convert the data frame to data table
setDT(disposals_streak_30)

# Create a streak variable using rleid and group by player_full_name
disposals_streak_30[, streak := seq_len(.N), by = .(player_full_name, rleid(over_30))][over_30 == 0, streak := 0]

# Convert back to tibble if needed
disposals_streak_30 <- as_tibble(disposals_streak_30)

# Get longest active streaks
longest_30_streaks <-
disposals_streak_30 |> 
  arrange(player_full_name, desc(round)) |> 
  group_by(player_full_name) |> 
  slice_head(n = 1) |>
  ungroup() |> 
  filter(streak > 1) |> 
  arrange(desc(streak))

# Get longest streak any time
longest_30_streaks_any <-
disposals_streak_30 |> 
  filter(streak > 1) |> 
  arrange(desc(streak), desc(round)) |> 
  group_by(player_full_name) |>
  filter(streak == max(streak))
  
longest_30_streaks |>
  select(last_round_played = round,
         player_full_name,
         streak)
```

## 25 Disposals

```{r}
# Create initial tibble
disposals_streak_25 <-
afl_fantasy_data |> 
  filter(season_name == "2023") |> 
  arrange(player_full_name, round) |> 
  select(match_name, round, player_full_name, disposals, tog_percentage) |> 
  filter(tog_percentage >= 50)

# Create a new binary column to mark where disposals >= 25
disposals_streak_25 <- disposals_streak_25 %>%
  mutate(over_25 = ifelse(disposals >= 25, 1, 0))

# Convert the data frame to data table
setDT(disposals_streak_25)

# Create a streak variable using rleid and group by player_full_name
disposals_streak_25[, streak := seq_len(.N), by = .(player_full_name, rleid(over_25))][over_25 == 0, streak := 0]

# Convert back to tibble if needed
disposals_streak_25 <- as_tibble(disposals_streak_25)

# Get longest active streaks
longest_25_streaks <-
disposals_streak_25 |> 
  arrange(player_full_name, desc(round)) |> 
  group_by(player_full_name) |> 
  slice_head(n = 1) |>
  ungroup() |> 
  filter(streak > 1) |> 
  arrange(desc(streak))

# Get longest streak any time
longest_25_streaks_any <-
disposals_streak_25 |> 
  filter(streak > 1) |> 
  arrange(desc(streak), desc(round)) |> 
  group_by(player_full_name) |>
  filter(streak == max(streak))

longest_25_streaks |>
  select(last_round_played = round,
         player_full_name,
         streak)
```

## 20 Disposals

```{r}
# Create initial tibble
disposals_streak_20 <-
afl_fantasy_data |> 
  filter(season_name == "2023") |> 
  arrange(player_full_name, round) |> 
  select(match_name, round, player_full_name, disposals, tog_percentage) |> 
  filter(tog_percentage >= 50)

# Create a new binary column to mark where disposals >= 20
disposals_streak_20 <- disposals_streak_20 %>%
  mutate(over_20 = ifelse(disposals >= 20, 1, 0))

# Convert the data frame to data table
setDT(disposals_streak_20)

# Create a streak variable using rleid and group by player_full_name
disposals_streak_20[, streak := seq_len(.N), by = .(player_full_name, rleid(over_20))][over_20 == 0, streak := 0]

# Convert back to tibble if needed
disposals_streak_20 <- as_tibble(disposals_streak_20)

# Get longest active streaks
longest_20_streaks <-
disposals_streak_20 |> 
  arrange(player_full_name, desc(round)) |> 
  group_by(player_full_name) |> 
  mutate(games_played = n()) |> 
  relocate(games_played, .before = round) |> 
  slice_head(n = 1) |>
  ungroup() |> 
  filter(streak > 1) |> 
  arrange(desc(streak))

# Get longest streak any time
longest_20_streaks_any <-
disposals_streak_20 |> 
  filter(streak > 1) |> 
  arrange(desc(streak), desc(round)) |> 
  group_by(player_full_name) |>
  filter(streak == max(streak))

longest_20_streaks |>
  select(last_round_played = round,
         player_full_name,
         streak)
```

## 15 Disposals

```{r}
# Create initial tibble
disposals_streak_15 <-
afl_fantasy_data |> 
  filter(season_name == "2023") |> 
  arrange(player_full_name, round) |> 
  select(match_name, round, player_full_name, disposals, tog_percentage) |> 
  filter(tog_percentage >= 50)

# Create a new binary column to mark where disposals >= 15
disposals_streak_15 <- disposals_streak_15 %>%
  mutate(over_15 = ifelse(disposals >= 15, 1, 0))

# Convert the data frame to data table
setDT(disposals_streak_15)

# Create a streak variable using rleid and group by player_full_name
disposals_streak_15[, streak := seq_len(.N), by = .(player_full_name, rleid(over_15))][over_15 == 0, streak := 0]

# Convert back to tibble if needed
disposals_streak_15 <- as_tibble(disposals_streak_15)

# Get longest active streaks
longest_15_streaks <-
disposals_streak_15 |> 
  arrange(player_full_name, desc(round)) |> 
  group_by(player_full_name) |> 
  mutate(games_played = n()) |> 
  relocate(games_played, .before = round) |> 
  slice_head(n = 1) |>
  ungroup() |> 
  filter(streak > 1) |> 
  arrange(desc(streak))

# Get longest streak any time
longest_15_streaks_any <-
disposals_streak_15 |> 
  filter(streak > 1) |> 
  arrange(desc(streak), desc(round)) |> 
  group_by(player_full_name) |>
  filter(streak == max(streak))

longest_15_streaks |>
  select(last_round_played = round,
         player_full_name,
         streak)
```

:::


# Streaks - 2014 Onwards

::: {.panel-tabset}

## 30 Disposals

```{r}
# Create initial tibble
disposals_streak_30 <-
afl_fantasy_data |> 
  arrange(player_full_name, start_time_utc) |> 
  select(match_name, season_name, round, start_time_utc, player_full_name, disposals, tog_percentage) |> 
  filter(tog_percentage >= 50)

# Create a new binary column to mark where disposals >= 30
disposals_streak_30 <- disposals_streak_30 %>%
  mutate(over_30 = ifelse(disposals >= 30, 1, 0))

# Convert the data frame to data table
setDT(disposals_streak_30)

# Create a streak variable using rleid and group by player_full_name
disposals_streak_30[, streak := seq_len(.N), by = .(player_full_name, rleid(over_30))][over_30 == 0, streak := 0]

# Convert back to tibble if needed
disposals_streak_30 <- as_tibble(disposals_streak_30)

# Get longest active streaks
longest_30_streaks <-
disposals_streak_30 |> 
  arrange(player_full_name, desc(start_time_utc)) |> 
  group_by(player_full_name) |> 
  slice_head(n = 1) |>
  ungroup() |> 
  filter(streak > 1) |> 
  arrange(desc(streak))

# Get longest streak any time
longest_30_streaks_any <-
disposals_streak_30 |> 
  filter(streak > 1) |> 
  arrange(desc(streak), desc(start_time_utc)) |> 
  group_by(player_full_name) |>
  filter(streak == max(streak))

longest_30_streaks |>
  filter(season_name == "2023") |> 
  select(last_round_played = round,
         player_full_name,
         streak)
```

## 25 Disposals

```{r}
# Create initial tibble
disposals_streak_25 <-
afl_fantasy_data |> 
  arrange(player_full_name, start_time_utc) |> 
  select(match_name, season_name, round, start_time_utc, player_full_name, disposals, tog_percentage) |> 
  filter(tog_percentage >= 50)

# Create a new binary column to mark where disposals >= 25
disposals_streak_25 <- disposals_streak_25 %>%
  mutate(over_25 = ifelse(disposals >= 25, 1, 0))

# Convert the data frame to data table
setDT(disposals_streak_25)

# Create a streak variable using rleid and group by player_full_name
disposals_streak_25[, streak := seq_len(.N), by = .(player_full_name, rleid(over_25))][over_25 == 0, streak := 0]

# Convert back to tibble if needed
disposals_streak_25 <- as_tibble(disposals_streak_25)

# Get longest active streaks
longest_25_streaks <-
disposals_streak_25 |> 
  arrange(player_full_name, desc(start_time_utc)) |> 
  group_by(player_full_name) |> 
  slice_head(n = 1) |>
  ungroup() |> 
  filter(streak > 1) |> 
  arrange(desc(streak))

# Get longest streak any time
longest_25_streaks_any <-
disposals_streak_25 |> 
  filter(streak > 1) |> 
  arrange(desc(streak), desc(start_time_utc)) |> 
  group_by(player_full_name) |>
  filter(streak == max(streak))

longest_25_streaks |>
  filter(season_name == "2023") |> 
  select(last_round_played = round,
         player_full_name,
         streak)
```


## 20 Disposals

```{r}
# Create initial tibble
disposals_streak_20 <-
afl_fantasy_data |> 
  arrange(player_full_name, start_time_utc) |> 
  select(match_name, season_name, round, start_time_utc, player_full_name, disposals, tog_percentage) |> 
  filter(tog_percentage >= 50)

# Create a new binary column to mark where disposals >= 20
disposals_streak_20 <- disposals_streak_20 %>%
  mutate(over_20 = ifelse(disposals >= 20, 1, 0))

# Convert the data frame to data table
setDT(disposals_streak_20)

# Create a streak variable using rleid and group by player_full_name
disposals_streak_20[, streak := seq_len(.N), by = .(player_full_name, rleid(over_20))][over_20 == 0, streak := 0]

# Convert back to tibble if needed
disposals_streak_20 <- as_tibble(disposals_streak_20)

# Get longest active streaks
longest_20_streaks <-
disposals_streak_20 |> 
  arrange(player_full_name, desc(start_time_utc)) |> 
  group_by(player_full_name) |> 
  slice_head(n = 1) |>
  ungroup() |> 
  filter(streak > 1) |> 
  arrange(desc(streak))

# Get longest streak any time
longest_20_streaks_any <-
disposals_streak_20 |> 
  filter(streak > 1) |> 
  arrange(desc(streak), desc(start_time_utc)) |> 
  group_by(player_full_name) |>
  filter(streak == max(streak))

# Return
longest_20_streaks |>
  filter(season_name == "2023") |> 
  select(last_round_played = round,
         player_full_name,
         streak)
```

## 15 Disposals

```{r}
# Create initial tibble
disposals_streak_15 <-
afl_fantasy_data |> 
  arrange(player_full_name, start_time_utc) |> 
  select(match_name, season_name, round, start_time_utc, player_full_name, disposals, tog_percentage) |> 
  filter(tog_percentage >= 50)

# Create a new binary column to mark where disposals >= 15
disposals_streak_15 <- disposals_streak_15 %>%
  mutate(over_15 = ifelse(disposals >= 15, 1, 0))

# Convert the data frame to data table
setDT(disposals_streak_15)

# Create a streak variable using rleid and group by player_full_name
disposals_streak_15[, streak := seq_len(.N), by = .(player_full_name, rleid(over_15))][over_15 == 0, streak := 0]

# Convert back to tibble if needed
disposals_streak_15 <- as_tibble(disposals_streak_15)

# Get longest active streaks
longest_15_streaks <-
disposals_streak_15 |> 
  arrange(player_full_name, desc(start_time_utc)) |> 
  group_by(player_full_name) |> 
  slice_head(n = 1) |>
  ungroup() |> 
  filter(streak > 1) |> 
  arrange(desc(streak))

# Get longest streak any time
longest_15_streaks_any <-
disposals_streak_15 |> 
  filter(streak > 1) |> 
  arrange(desc(streak), desc(start_time_utc)) |> 
  group_by(player_full_name) |>
  filter(streak == max(streak))

# Return
longest_15_streaks |>
  filter(season_name == "2023") |> 
  select(last_round_played = round,
         player_full_name,
         streak)
```

:::