---
title: "Weekly Fantasy League Report"
subtitle: "2023 Season"
format:
  html:
      df-print: kable
      theme: cosmo
      toc: true
      self-contained: true
editor: visual
author: James Brown
echo: false
warning: false
message: false
---

```{r}
# libraries and functions
library(tidyverse)
library(request)

# Not in function
`%notin%` <- Negate(`%in%`)

# Get URL of data from API
url = "https://fantasy.afl.com.au/data/afl/players.json?_=1677977794603"

# Load data processing functions
source("../../Functions/data_processing_functions.R")

# Get Data from API
scraped_fantasy_data <-
  api(url) %>%
  http()

get_afl_api_player_data <- function(player_data){
  # Name and price data
  first_name = player_data$first_name
  last_name = player_data$last_name
  id = player_data$id
  dob = player_data$dob
  
  # Return Dataframe with each derived variable as a column
  tibble(
    first_name,
    last_name,
    id,
    dob
  )
}

##%######################################################%##
#                                                          #
####                  Get output data                   ####
#                                                          #
##%######################################################%##

afl_player_api_data <-
  scraped_fantasy_data |> 
  map(get_afl_api_player_data) |> 
  reduce(bind_rows) |>
  mutate(player_full_name = paste(first_name, last_name)) |> 
  relocate(player_full_name, .after = last_name) |> 
  select(player_full_name, id, dob)

# Ages
ages <-
  afl_player_api_data |> select(player_full_name, dob)

afl_player_api_data <- 
  afl_player_api_data |> select(-dob)
```

```{r}
# Get Fantasy Website Team Rosters
round_1_json <- jsonlite::fromJSON("../../Data/round_1_scores.json", simplifyDataFrame = TRUE)

# Get data from json
# Defenders
defenders <-
  round_1_json$result |>
  unnest(lineup) |> 
  unnest(`1`) |> 
  select(name, firstname, lastname, id = `1`) |> 
  mutate(position = "Defender") |> 
  left_join(afl_player_api_data) |> 
  select(-id)

midfielders <-
  round_1_json$result |>
  unnest(lineup) |> 
  unnest(`2`) |> 
  select(name, firstname, lastname, id = `2`) |> 
  mutate(position = "Midfield") |> 
  left_join(afl_player_api_data) |> 
  select(-id)

rucks <-
  round_1_json$result |>
  unnest(lineup) |> 
  unnest(`3`) |> 
  select(name, firstname, lastname, id = `3`) |> 
  mutate(position = "Ruck") |> 
  left_join(afl_player_api_data) |> 
  select(-id)

forwards <-
  round_1_json$result |>
  unnest(lineup) |> 
  unnest(`4`) |> 
  select(name, firstname, lastname, id = `4`) |> 
  mutate(position = "Forward") |> 
  left_join(afl_player_api_data) |> 
  select(-id)

bench <-
  round_1_json$result |>
  unnest(lineup) |> 
  unnest(bench) |> 
  select(name, firstname, lastname, id = bench) |> 
  mutate(position = "Bench") |> 
  left_join(afl_player_api_data) |> 
  select(-id)

emergencies <-
  round_1_json$result |>
  unnest(lineup) |>
  select(name, firstname, lastname, emergency) |>
  unnest(emergency) |>
  pivot_longer(cols = `1`:`4`,
               names_to = "emergency_number",
               values_to = "id") |>
  filter(id != 0) |>
  left_join(afl_player_api_data) |>
  mutate(
    position = case_when(
      emergency_number == 1 ~ "Emergency Defender",
      emergency_number == 2 ~ "Emergency Midfielder",
      emergency_number == 3 ~ "Emergency Ruck",
      emergency_number == 4 ~ "Emergency Forward"
    )
  ) |>
  transmute(name, firstname, lastname, position, player_full_name)

```

```{r}
# Get scores and TOG
all_team_players <- bind_rows(defenders, midfielders, rucks, forwards, bench, emergencies)

# Get all fantasy scores
scores <-
  get_fantasy_data(season = 2023, round_number = 1) |>
  select(player_full_name, fantasy_points, contains("tog"))

# Combine
all_scores <-
all_team_players |>
  left_join(scores) |> 
  replace_na(list(fantasy_points = 0, tog_percentage = 0))
```

## Positional Graphs

### Defenders

```{r}
all_defender_scores <-
  all_scores |> 
  group_by(name) |> 
  filter(str_detect(position, "Defender")) |> 
  mutate(emergency_present = str_detect(position, "Emergency")) |> 
  mutate(emergency_present = max(emergency_present)) |> 
  mutate(fantasy_points = ifelse(tog_percentage < 50 & emergency_present == 1, 0, fantasy_points)) |> 
  mutate(injured_player = max(fantasy_points == 0)) |> 
  arrange(name, position) |> 
  filter(!(str_detect(position, "Emergency") & injured_player == 0))

all_defender_scores |>
  summarise(defender_total = sum(fantasy_points)) |>
  arrange(desc(defender_total)) |>
  ggplot(mapping = aes(x = reorder(name, desc(defender_total)), y = defender_total)) +
  geom_col(fill = "orangered1", alpha = 0.8) +
  labs(x = "Team", y = "Points Scored by Defence") +
  ggtitle("Defence") +
  ggthemes::theme_fivethirtyeight() +
  coord_flip() +
  scale_y_continuous(breaks = seq(0, 600, 50))
```

### Midfielders

```{r}
all_midfielder_scores <-
  all_scores |> 
  group_by(name) |> 
  filter(str_detect(position, "Midfield")) |> 
  mutate(emergency_present = str_detect(position, "Emergency")) |> 
  mutate(emergency_present = max(emergency_present)) |> 
  mutate(fantasy_points = ifelse(tog_percentage < 50 & emergency_present == 1, 0, fantasy_points)) |> 
  mutate(injured_player = max(fantasy_points == 0)) |> 
  arrange(name, position) |> 
  filter(!(str_detect(position, "Emergency") & injured_player == 0))

all_midfielder_scores |>
  summarise(midfielder_total = sum(fantasy_points)) |>
  arrange(desc(midfielder_total)) |>
  ggplot(mapping = aes(x = reorder(name, desc(midfielder_total)), y = midfielder_total)) +
  geom_col(fill = "orangered1", alpha = 0.8) +
  labs(x = "Team", y = "Points Scored by Midfield") +
  ggtitle("Midfield") +
  ggthemes::theme_fivethirtyeight() +
  coord_flip() +
  scale_y_continuous(breaks = seq(0, 750, 50))
```

### Rucks

```{r}
all_ruck_scores <-
  all_scores |> 
  group_by(name) |> 
  filter(str_detect(position, "Ruck")) |> 
  mutate(emergency_present = str_detect(position, "Emergency")) |> 
  mutate(emergency_present = max(emergency_present)) |> 
  mutate(fantasy_points = ifelse(tog_percentage < 50 & emergency_present == 1, 0, fantasy_points)) |> 
  mutate(injured_player = max(fantasy_points == 0)) |> 
  arrange(name, position) |> 
  filter(!(str_detect(position, "Emergency") & injured_player == 0))

all_ruck_scores |>
  summarise(ruck_total = sum(fantasy_points)) |>
  arrange(desc(ruck_total)) |>
  ggplot(mapping = aes(x = reorder(name, desc(ruck_total)), y = ruck_total)) +
  geom_col(fill = "orangered1", alpha = 0.8) +
  labs(x = "Team", y = "Points Scored by Ruck") +
  ggtitle("Ruck") +
  ggthemes::theme_fivethirtyeight() +
  coord_flip() +
  scale_y_continuous(breaks = seq(0, 150, 25))
```

### Forwards

```{r}
all_forward_scores <-
  all_scores |> 
  group_by(name) |> 
  filter(str_detect(position, "Forward")) |> 
  mutate(emergency_present = str_detect(position, "Emergency")) |> 
  mutate(emergency_present = max(emergency_present)) |> 
  filter((tog_percentage > 50 & emergency_present == 1) | emergency_present == 0) |> 
  mutate(injured_player = max(fantasy_points == 0)) |> 
  arrange(name, position) |> 
  filter(!(str_detect(position, "Emergency") & injured_player == 0))

all_forward_scores |>
  summarise(forward_total = sum(fantasy_points)) |>
  arrange(desc(forward_total)) |>
  ggplot(mapping = aes(x = reorder(name, desc(forward_total)), y = forward_total)) +
  geom_col(fill = "orangered1", alpha = 0.8) +
  labs(x = "Team", y = "Points Scored by Forwards") +
  ggtitle("Forwards") +
  ggthemes::theme_fivethirtyeight() +
  coord_flip() +
  scale_y_continuous(breaks = seq(0, 600, 50))
```

## Average Score For Each Position

```{r}
bind_rows(all_defender_scores,
          all_midfielder_scores,
          all_ruck_scores,
          all_forward_scores) |>
  filter(fantasy_points > 0) |>
  mutate(position = str_replace(position, "Emergency Defender", "Defender")) |>
  mutate(position = str_replace(position, "Emergency Midfielder", "Midfield")) |>
  mutate(position = str_replace(position, "Emergency Ruck", "Ruck")) |>
  mutate(position = str_replace(position, "Emergency Forward", "Forward")) |> 
  group_by(position) |> 
  summarise(`Avg Score` = round(mean(fantasy_points), 2)) |> 
  arrange(desc(`Avg Score`))
  
```

## Best Scores by Position

### Defenders
```{r}
all_defender_scores |> 
  ungroup() |> 
  arrange(desc(fantasy_points)) |>
  slice_head(n = 10) |> 
  transmute(name, coach = paste(firstname, lastname), position, player = player_full_name, fantasy_points)
```

### Midfielders
```{r}
all_midfielder_scores |> 
  ungroup() |> 
  arrange(desc(fantasy_points)) |>
  slice_head(n = 10) |> 
  transmute(name, coach = paste(firstname, lastname), position, player = player_full_name, fantasy_points)
```

### Rucks
```{r}
all_ruck_scores |> 
  ungroup() |> 
  arrange(desc(fantasy_points)) |>
  slice_head(n = 4) |> 
  transmute(name, coach = paste(firstname, lastname), position, player = player_full_name, fantasy_points)
```

### Forwards
```{r}
all_forward_scores |> 
  ungroup() |> 
  arrange(desc(fantasy_points)) |>
  slice_head(n = 10) |> 
  transmute(name, coach = paste(firstname, lastname), position, player = player_full_name, fantasy_points)
```

## Worst Scores by Position

### Defenders
```{r}
all_defender_scores |> 
  ungroup() |> 
  arrange(fantasy_points) |>
  filter(fantasy_points > 0) |> 
  slice_head(n = 10) |> 
  transmute(name, coach = paste(firstname, lastname), position, player = player_full_name, fantasy_points) 
```

### Midfielders
```{r}
all_midfielder_scores |> 
  ungroup() |> 
  arrange(fantasy_points) |>
  filter(fantasy_points > 0) |>   slice_head(n = 10) |> 
  transmute(name, coach = paste(firstname, lastname), position, player = player_full_name, fantasy_points)
```

### Rucks
```{r}
all_ruck_scores |>
  ungroup() |>
  arrange(fantasy_points) |>
  filter(fantasy_points > 0) |>
  slice_head(n = 4) |>
  transmute(
    name,
    coach = paste(firstname, lastname),
    position,
    player = player_full_name,
    fantasy_points
  )
```

### Forwards
```{r}
all_forward_scores |> 
  ungroup() |> 
  arrange(fantasy_points) |>
  filter(fantasy_points > 0) |>
  slice_head(n = 10) |> 
  transmute(name, coach = paste(firstname, lastname), position, player = player_full_name, fantasy_points)
```

## Best Unused Bench Players

```{r}
bench |> 
  filter(player_full_name %notin% all_defender_scores$player_full_name) |> 
  filter(player_full_name %notin% all_midfielder_scores$player_full_name) |> 
  filter(player_full_name %notin% all_ruck_scores$player_full_name) |> 
  filter(player_full_name %notin% all_forward_scores$player_full_name) |> 
  left_join(scores) |>
  arrange(desc(fantasy_points)) |> 
  slice_head(n = 5) |> 
  transmute(name, coach = paste(firstname, lastname), position, player = player_full_name, fantasy_points)

```

## Tonnes by Team
```{r}
bind_rows(all_defender_scores,
          all_midfielder_scores,
          all_ruck_scores,
          all_forward_scores) |> 
  ungroup() |> 
  filter(fantasy_points >= 100) |> 
  group_by(name) |> 
  tally() |> 
  arrange(desc(n))
```

## 50s or Worse by Team
```{r}
bind_rows(all_defender_scores,
          all_midfielder_scores,
          all_ruck_scores,
          all_forward_scores) |> 
  ungroup() |> 
  filter(fantasy_points <= 60) |> 
  group_by(name) |> 
  tally() |> 
  arrange(desc(n))
```

## Average Age Of Fielded Players
```{r}
# Avg player ages
bind_rows(all_defender_scores,
          all_midfielder_scores,
          all_ruck_scores,
          all_forward_scores) |> 
  filter(fantasy_points > 0) |> 
  left_join(ages) |>
  mutate(player_age = today() - ymd(dob)) |> 
  mutate(player_age = as.numeric(player_age) / 365.25) |> 
  group_by(name) |> 
  summarise(`Avg Age` = round(mean(player_age), digits = 2)) |> 
  arrange(desc(`Avg Age`))
```

