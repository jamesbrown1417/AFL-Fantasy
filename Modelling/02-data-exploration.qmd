---
title: "Data Exploration"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "2023-05-24"
format:
  html:
    df-print: default
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
editor: visual
---

```{r}
#===============================================================================
# Libraries and functions
#===============================================================================

library(tidyverse)
library(scales)
`%notin%` <- Negate(`%in%`)

# Read in data
all_data <- read_rds("afl_fantasy_data_all.rds")
```

# 1.) - Seasonal Trends

## Fantasy Points

```{r}
# Fantasy Points
fantasy_points_seasonal <-
  all_data |>
  filter(tog_percentage > 0) |> 
  mutate(fantasy_points = if_else(season_name == "2020", fantasy_points / 0.8, fantasy_points)) |> 
  group_by(season_name, round) |>
  summarise(
    round_start_date = min(start_time_utc),
    players = n(),
    total_fantasy_points = sum(fantasy_points, na.rm = TRUE),
    avg_fantasy_points = mean(fantasy_points, na.rm = TRUE),
    median_fantasy_points = median(fantasy_points, na.rm = TRUE)
  )

# Create a plot-----------------------------------------------------------------

# Define a color palette
color_pal <- colorRampPalette(c("#2c7bb6", "#d7191c"))(100)

fantasy_points_seasonal |> 
  ggplot(aes(x = round_start_date, y = median_fantasy_points)) +
  geom_point(aes(color = median_fantasy_points), size = 3, alpha = 0.6) +
  geom_smooth(method = "loess", se = F, color = "black", linetype = "dashed") +
  scale_color_gradientn(colours = color_pal) +
  labs(title = "Seasonal Trend of Fantasy Points",
       x = "Start Date of Round",
       y = "Median Fantasy Points in Round") +
  theme_minimal() +
  theme(
    text = element_text(color = "black"),
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    panel.grid.major = element_line(linetype = "solid", color = "grey90"),
    panel.grid.minor = element_blank(),
    plot.background = element_rect(fill = "white", color = "white"),
    panel.background = element_rect(fill = "white", color = "white"),
    legend.position = "bottom"
  )
```

## Disposals

```{r}
# Disposals
disposals_seasonal <-
  all_data |>
  filter(tog_percentage > 0) |> 
  mutate(disposals = if_else(season_name == "2020", disposals / 0.8, disposals)) |> 
  group_by(season_name, round) |>
  summarise(
    round_start_date = min(start_time_utc),
    players = n(),
    total_disposals = sum(disposals, na.rm = TRUE),
    avg_disposals = mean(disposals, na.rm = TRUE),
    median_disposals = median(disposals, na.rm = TRUE)
  )

# Create a plot-----------------------------------------------------------------

disposals_seasonal |> 
  ggplot(aes(x = round_start_date, y = avg_disposals)) +
  geom_point(aes(color = avg_disposals), size = 3, alpha = 0.6) +
  geom_smooth(method = "loess", se = F, color = "black", linetype = "dashed") +
  scale_color_gradientn(colours = color_pal) +
  labs(title = "Seasonal Trend of Disposals",
       x = "Start Date of Round",
       y = "Mean Disposals in Round") +
  theme_minimal() +
  theme(
    text = element_text(color = "black"),
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    panel.grid.major = element_line(linetype = "solid", color = "grey90"),
    panel.grid.minor = element_blank(),
    plot.background = element_rect(fill = "white", color = "white"),
    panel.background = element_rect(fill = "white", color = "white"),
    legend.position = "bottom"
  )
```

## Marks

```{r}
# Marks
marks_seasonal <-
  all_data |>
  filter(tog_percentage > 0) |> 
  mutate(marks = if_else(season_name == "2020", marks / 0.8, marks)) |> 
  group_by(season_name, round) |>
  summarise(
    round_start_date = min(start_time_utc),
    players = n(),
    total_marks = sum(marks, na.rm = TRUE),
    avg_marks = mean(marks, na.rm = TRUE),
    median_marks = median(marks, na.rm = TRUE)
  )

# Create a plot-----------------------------------------------------------------

marks_seasonal |> 
  ggplot(aes(x = round_start_date, y = avg_marks)) +
  geom_point(aes(color = avg_marks), size = 3, alpha = 0.6) +
  geom_smooth(method = "loess", se = F, color = "black", linetype = "dashed") +
  scale_color_gradientn(colours = color_pal) +
  labs(title = "Seasonal Trend of Marks",
       x = "Start Date of Round",
       y = "Mean Marks in Round") +
  theme_minimal() +
  theme(
    text = element_text(color = "black"),
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    panel.grid.major = element_line(linetype = "solid", color = "grey90"),
    panel.grid.minor = element_blank(),
    plot.background = element_rect(fill = "white", color = "white"),
    panel.background = element_rect(fill = "white", color = "white"),
    legend.position = "bottom"
  )
```

## Tackles

```{r}
# Tackles
tackles_seasonal <-
  all_data |>
  filter(tog_percentage > 0) |> 
  mutate(tackles = if_else(season_name == "2020", tackles / 0.8, tackles)) |> 
  group_by(season_name, round) |>
  summarise(
    round_start_date = min(start_time_utc),
    players = n(),
    total_tackles = sum(tackles, na.rm = TRUE),
    avg_tackles = mean(tackles, na.rm = TRUE),
    median_tackles = median(tackles, na.rm = TRUE)
  )

# Create a plot-----------------------------------------------------------------

tackles_seasonal |> 
  ggplot(aes(x = round_start_date, y = avg_tackles)) +
  geom_point(aes(color = avg_tackles), size = 3, alpha = 0.6) +
  geom_smooth(method = "loess", se = F, color = "black", linetype = "dashed") +
  scale_color_gradientn(colours = color_pal) +
  labs(title = "Seasonal Trend of Tackles",
       x = "Start Date of Round",
       y = "Mean Tackles in Round") +
  theme_minimal() +
  theme(
    text = element_text(color = "black"),
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    panel.grid.major = element_line(linetype = "solid", color = "grey90"),
    panel.grid.minor = element_blank(),
    plot.background = element_rect(fill = "white", color = "white"),
    panel.background = element_rect(fill = "white", color = "white"),
    legend.position = "bottom"
  )
```

# 2.) - Weather Trends

## Fantasy Points
```{r}
# Fantasy Points - by weather conditions
fantasy_points_weather <-
  all_data |>
  filter(tog_percentage > 0) |> 
  mutate(fantasy_points = if_else(season_name == "2020", fantasy_points / 0.8, fantasy_points)) |> 
  group_by(weather_category) |>
  summarise(
    players = n(),
    total_fantasy_points = sum(fantasy_points, na.rm = TRUE),
    avg_fantasy_points = mean(fantasy_points, na.rm = TRUE),
    median_fantasy_points = median(fantasy_points, na.rm = TRUE)
  ) |> 
  arrange(desc(avg_fantasy_points))

# Plot
fantasy_points_weather |> 
  ggplot(aes(x = weather_category, y = avg_fantasy_points)) +
  geom_col()
```

## Disposals
```{r}
# Disposals - by weather conditions
disposals_weather <-
  all_data |>
  filter(tog_percentage > 0) |> 
  mutate(disposals = if_else(season_name == "2020", disposals / 0.8, disposals)) |> 
  group_by(weather_category) |>
  summarise(
    players = n(),
    total_disposals = sum(disposals, na.rm = TRUE),
    avg_disposals = mean(disposals, na.rm = TRUE),
    median_disposals = median(disposals, na.rm = TRUE)
  ) |> 
  arrange(desc(avg_disposals))

# Plot
disposals_weather |> 
  ggplot(aes(x = weather_category, y = avg_disposals)) +
  geom_col()
```

## Marks
```{r}
# Marks - by weather conditions
marks_weather <-
  all_data |>
  filter(tog_percentage > 0) |> 
  mutate(marks = if_else(season_name == "2020", marks / 0.8, marks)) |> 
  group_by(weather_category) |>
  summarise(
    players = n(),
    total_marks = sum(marks, na.rm = TRUE),
    avg_marks = mean(marks, na.rm = TRUE),
    median_marks = median(marks, na.rm = TRUE)
  ) |> 
  arrange(desc(avg_marks))

# Plot
marks_weather |> 
  ggplot(aes(x = weather_category, y = avg_marks)) +
  geom_col()
```

## Tackles
```{r}
# Tackles - by weather conditions
tackles_weather <-
  all_data |>
  filter(tog_percentage > 0) |> 
  mutate(tackles = if_else(season_name == "2020", tackles / 0.8, tackles)) |> 
  group_by(weather_category) |>
  summarise(
    players = n(),
    total_tackles = sum(tackles, na.rm = TRUE),
    avg_tackles = mean(tackles, na.rm = TRUE),
    median_tackles = median(tackles, na.rm = TRUE)
  ) |> 
  arrange(desc(avg_tackles))

# Plot
tackles_weather |> 
  ggplot(aes(x = weather_category, y = avg_tackles)) +
  geom_col()
```

# 3.) - Day vs. Night Trends

# 4.) - Inside Midfielder tackles by weather conditions

```{r}
# Tackles - by weather conditions
inside_mid_tackles_weather <-
  all_data |>
  filter(tog_percentage > 0) |> 
  filter(cba_percentage > 0.4) |> 
  mutate(tackles = if_else(season_name == "2020", tackles / 0.8, tackles)) |> 
  group_by(weather_category) |>
  summarise(
    players = n(),
    total_tackles = sum(tackles, na.rm = TRUE),
    avg_tackles = mean(tackles, na.rm = TRUE),
    median_tackles = median(tackles, na.rm = TRUE)
  ) |> 
  arrange(desc(avg_tackles))

# Plot
tackles_weather |> 
  ggplot(aes(x = weather_category, y = avg_tackles)) +
  geom_col()
```


# 5.) - Player Performance by Margin of Win / Loss

## Fantasy Points

```{r}
fantasy_points_margin <-
  all_data |>
  filter(tog_percentage > 0) |>
  mutate(fantasy_points = if_else(season_name == "2020", fantasy_points / 0.8, fantasy_points)) |>
  select(player_full_name,
         season_name,
         round,
         match_name,
         player_team,
         home_team,
         away_team,
         home_team_score,
         away_team_score,
         margin,
         fantasy_points) |>
  mutate(margin = if_else(player_team == home_team & home_team_score < away_team_score, -margin, margin)) |> 
  mutate(margin = if_else(player_team == away_team & away_team_score < home_team_score, -margin, margin))

# Produce Plot
fantasy_points_margin |> 
  group_by(season_name, round, player_team) |> 
  summarise(avg_fantasy_points = mean(fantasy_points, na.rm = TRUE),
            margin = median(margin)) |> 
  ggplot(aes(x = margin, y = avg_fantasy_points)) +
  geom_jitter() +
  geom_smooth()

```

## Disposals

```{r}
disposals_margin <-
  all_data |>
  filter(tog_percentage > 0) |>
  mutate(disposals = if_else(season_name == "2020", disposals / 0.8, disposals)) |>
  select(player_full_name,
         season_name,
         round,
         match_name,
         player_team,
         home_team,
         away_team,
         home_team_score,
         away_team_score,
         margin,
         disposals) |>
  mutate(margin = if_else(player_team == home_team & home_team_score < away_team_score, -margin, margin)) |> 
  mutate(margin = if_else(player_team == away_team & away_team_score < home_team_score, -margin, margin))

# Produce Plot
disposals_margin |> 
  group_by(season_name, round, player_team) |> 
  summarise(avg_disposals = mean(disposals, na.rm = TRUE),
            margin = median(margin)) |> 
  ggplot(aes(x = margin, y = avg_disposals)) +
  geom_jitter() +
  geom_smooth()
```